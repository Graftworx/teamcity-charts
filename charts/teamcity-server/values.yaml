image:
  repository: jetbrains/teamcity-server
  tag: latest
  pullPolicy: Always
  imagePullSecrets: []

proxy:
  replicas: 2
  image:
    repository: nginx
    tag: stable
    pullPolicy: IfNotPresent
    imagePullSecrets: []
  ingress:
    hosts:
      - teamcity.example.com
      - teamcity.isolated.example.com
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: letsencrypt
      # Nginx specific annotations
      nginx.ingress.kubernetes.io/client-body-buffer-size: 1M
      nginx.ingress.kubernetes.io/proxy-body-size: 400M
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
  main_node_id: MAIN_SERVER # Must match with below for default route

teamcity:
  server:
    replicas: 1
    env:
      NODE_ID: MAIN_SERVER # Used to generate Nginx configuration
      ROOT_URL: https://teamcity-main.example.com
      TEAMCITY_SERVER_MEM_OPTS: -Xms512m -Xmx2048m
      TEAMCITY_SERVER_OPTS: >
        -Dteamcity.server.nodeId=${NODE_ID}
        -Dteamcity.server.rootURL=${ROOT_URL}
        -Dteamcity.caches.path=/var/cache/teamcity
    resources:
      requests:
        cpu: 100m
        memory: 2048Mi
    ingress:
      hosts:
        - teamcity-main.example.com
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: letsencrypt
        # Nginx specific annotations
        nginx.ingress.kubernetes.io/client-body-buffer-size: 1M
        nginx.ingress.kubernetes.io/proxy-body-size: 400M
        nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
    affinity: {}
    tolerations:
      - key: "{{ $.Release.Name }}"
        operator: Exists
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: "{{ $.Release.Name }}"
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: "{{ $.Release.Name }}"
  secondary:
    replicas: 1
    env:
      NODE_ID: teamcity-secondary
      ROOT_URL: https://teamcity-secondary.example.com
      TEAMCITY_SERVER_MEM_OPTS: -Xms512m -Xmx2048m
      TEAMCITY_SERVER_OPTS: >
        -Dteamcity.server.nodeId=${NODE_ID}
        -Dteamcity.caches.path=/var/cache/teamcity
        -Dteamcity.server.rootURL=${ROOT_URL}
    resources:
      requests:
        cpu: 100m
        memory: 2048Mi
    ingress:
      hosts:
        - teamcity-secondary.example.com
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: letsencrypt
        # Nginx specific annotations
        nginx.ingress.kubernetes.io/client-body-buffer-size: 1M
        nginx.ingress.kubernetes.io/proxy-body-size: 400M
        nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
    affinity: {}
    tolerations:
      - key: "{{ $.Release.Name }}"
        operator: Exists
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: "{{ $.Release.Name }}"
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: "{{ $.Release.Name }}"

pdb:
  enabled: true
  minAvailable: 1

pvc:
  name: teamcity-server-data
  annotations:
    helm.sh/resource-policy: keep
  storageClassName: efs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 16Gi

# Create & Mount PVC for /opt/teamcity directories
ephemeral:
  temp:
    enabled: false
    annotations: {}
    storageClassName: efs
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi
  logs:
    enabled: false
    annotations: {}
    storageClassName: efs
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi
  cache:
    enabled: false
    annotations: {}
    storageClassName: efs
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi

database:
  host: "127.0.0.1"
  name: "teamcity"
  user: "teamcity"
  password: "password"

configMap:
  datadirConfig:
    database.mysql.properties: |
      connectionUrl=jdbc\:mysql\://{{ $.Values.database.host }}/{{ $.Values.database.name}}?allowPublicKeyRetrieval=true&useSSL=false
      connectionProperties.user={{ $.Values.database.user }}
      connectionProperties.password={{ $.Values.database.password }}

      # This option, when set to "true",
      # allows reducing memory usage on large query results.
      # Should only be used if the jdbc driver version is higher than 5.0.6.
      # connectionProperties.useCursorFetch=true

      # The maximum number of connections TeamCity can open on a database server.
      maxConnections=50

      # Specifies whether TeamCity should check each jdbc connection before use.
      # It reduces the system performance but avoids cases when the system uses
      # a connection that was closed by the database server due to a time-out or this
      # connection was broken during the previous operation.
      innodb_buffer_pool_size=2000M
      innodb_log_file_size=1024M
      innodb_flush_log_at_trx_commit=2
    database.properties: |
      connectionUrl=jdbc\:mysql\://{{ $.Values.database.host }}/{{ .Values.database.name}}?allowPublicKeyRetrieval=true&useSSL=false
      connectionProperties.user={{ $.Values.database.user }}
      connectionProperties.password={{ $.Values.database.password }}
      maxConnections=50
  optConf:
    server.xml: |-
      <?xml version='1.0' encoding='utf-8'?>
      <Server port="8105" shutdown="SHUTDOWN">
        <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
        <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
        <!-- Prevent memory leaks due to use of particular java/javax APIs-->
        <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
        <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
        <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />
        <GlobalNamingResources>
          <Resource name="UserDatabase" auth="Container"
                    type="org.apache.catalina.UserDatabase"
                    description="User database that can be updated and saved"
                    factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                    pathname="conf/tomcat-users.xml" />
        </GlobalNamingResources>
        <Service name="Catalina">
          <Connector port="8111" protocol="org.apache.coyote.http11.Http11NioProtocol"
                    connectionTimeout="60000"
                    redirectPort="8543"
                    useBodyEncodingForURI="true"
                    tcpNoDelay="1"
          />
          <Engine name="Catalina" defaultHost="localhost">
            <Realm className="org.apache.catalina.realm.LockOutRealm">
              <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                    resourceName="UserDatabase"/>
            </Realm>

            <Host name="localhost"  appBase="webapps"
                  unpackWARs="true" autoDeploy="true">
              <Valve className="org.apache.catalina.valves.ErrorReportValve"
                    showReport="false"
                    showServerInfo="false" />
            <Valve
                className="org.apache.catalina.valves.RemoteIpValve"
                remoteIpHeader="x-forwarded-for"
                protocolHeader="x-forwarded-proto"
                portHeader="x-forwarded-port"
                />
            </Host>
          </Engine>
        </Service>
      </Server>
